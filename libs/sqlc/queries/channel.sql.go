// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: channel.sql

package queries

import (
	"context"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (
    twitch_name, twitch_id
) VALUES (
    $1, $2
)
RETURNING id, twitch_name, twitch_id
`

type CreateChannelParams struct {
	TwitchName string `json:"twitch_name"`
	TwitchID   int32  `json:"twitch_id"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createChannel, arg.TwitchName, arg.TwitchID)
	var i Channel
	err := row.Scan(&i.ID, &i.TwitchName, &i.TwitchID)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
       WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteChannel, id)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT id, twitch_name, twitch_id FROM channels
         WHERE id = $1
`

func (q *Queries) GetChannel(ctx context.Context, id int32) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannel, id)
	var i Channel
	err := row.Scan(&i.ID, &i.TwitchName, &i.TwitchID)
	return i, err
}

const getChannelIdByName = `-- name: GetChannelIdByName :one
SELECT id FROM channels
         WHERE twitch_name = $1
`

func (q *Queries) GetChannelIdByName(ctx context.Context, twitchName string) (int32, error) {
	row := q.db.QueryRow(ctx, getChannelIdByName, twitchName)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, twitch_name, twitch_id FROM channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ID, &i.TwitchName, &i.TwitchID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :one
UPDATE channels
   SET twitch_name = $2, twitch_id = $3
 WHERE id = $1
 RETURNING id, twitch_name, twitch_id
`

type UpdateChannelParams struct {
	ID         int32  `json:"id"`
	TwitchName string `json:"twitch_name"`
	TwitchID   int32  `json:"twitch_id"`
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, updateChannel, arg.ID, arg.TwitchName, arg.TwitchID)
	var i Channel
	err := row.Scan(&i.ID, &i.TwitchName, &i.TwitchID)
	return i, err
}
